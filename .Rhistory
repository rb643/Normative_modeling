View(upper_tri)
View(melted_cormat)
corrplot(x)
View(x)
heatmap(x)
y = as.matrix(x)
View(y)
heatmap(y)
y = as.matrix(upper_tri)
heatmap(y)
View(upper_tri)
save.image("~/Dropbox/PhD/Study_15_Testosterone/pvalues.RData")
load("~/Dropbox/PhD/Study_15_Testosterone/pvalues.RData")
View(upper_tri)
View(y)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
View(dat2)
dat2 <- x %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
nameY=c('dDMN','Hypothalamus','MidBrain','OFC','Amygdala','Salience','SubcortThreat')
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:7),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1:49),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(nameY, levels=1),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- y %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
library(gplots)
heatmap.2(x,dendrogram = "none")
heatmap.2(y,dendrogram = "none")
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE)
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y)
heatmap.2(y,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y, notecol = "black")
z = round(y,3)
View(z)
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = y, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none', key = F)
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none')
heatmap.2(z,dendrogram = "none", Rowv = FALSE, Colv = FALSE, cellnote = z, notecol = "black", trace = 'none', density.info = 'none')
install.packages('circlize')
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
chordDiagram(mat)
library(circlize)
chordDiagram(mat)
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
EEGNames = (  'Fp1' 'AF7' 'AF3' 'F1')
EEGNames = ('Fp1' 'AF7' 'AF3' 'F1')
EEGNames = ('Fp1','AF7','AF3','F1')
EEGNames = c('Fp1' 'AF7' 'AF3' 'F1')
EEGNames = c('Fp1','AF7','AF3','F1')
x = read.delim(pipe("pbpaste"))
y = as.matrix(x)
View(y)
View(x)
x = read.delim(pipe("pbpaste"),header=FALSE)
y = as.matrix(x)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
chordDiagram(x)
rownames(x) = EEGNames
colnames(x) = EEGNames
View(x)
x = as.matrix(x)
rownames(x) = EEGNames
colnames(x) = EEGNames
chordDiagram(x)
chordDiagram(x, col = x)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
posx = read.delim(pipe("pbpaste"),header=FALSE)
posx = as.matrix(posx)
chordDiagram(adj, col = posx)
View(posx)
posx = read.delim(pipe("pbpaste"),header=FALSE)
posx = as.matrix(posx)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
chordDiagram(adj, col = posx)
col_mat = rand_color(length(adj), transparency = 0.5)
head(col_mat)
chordDiagram(adj, col = col_mat)
col_mat = rand_color(length(posx), transparency = 0.5)
chordDiagram(adj, col = col_mat)
library(circlize)
?colorRamp2
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
col_fun(seq(-2, 2, by = 0.5))
View(col_fun)
col_fun = colorRamp2(c(log10(0.0001), log10(0.05), log10(1)), c("green", "white", "red"))
col_fun(log10(c(0.000001, 0.0012, 0.012, 0.2)))
space = c("RGB", "HSV", "LAB", "XYZ", "sRGB", "LUV")
par(xpd = NA)
plot(NULL, xlim = c(-1, 1), ylim = c(0, length(space)+1), type = "n")
for(i in seq_along(space)) {
f = colorRamp2(c(-1, 0, 1), c("green", "black", "red"), space = space[i])
x = seq(-1, 1, length = 200)
rect(x-1/200, i-0.5, x+1/200, i+0.5, col = f(x), border = NA)
text(1, i, space[i], adj = c(-0.2, 0.5))
}
par(xpd = FALSE)
?chordDiagram
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
col_mat = colorRamp2(adj)
library(circlize)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
?colorRamp2
col_mat = colorRamp2([1:10],adj,transparency = 0,space="LAB")
col_mat = colorRamp2(1:10,adj,transparency = 0,space="LAB")
col_mat = colorRamp2(adj,adj,transparency = 0,space="LAB")
View(col_mat)
View(col_mat)
col_mat = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_fun = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_mat = col_fun(adj)
View(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
col_mat = col_fun(adj)
chordDiagram(adj,col = col_mat)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(adj) = EEGNames
colnames(adj) = EEGNames
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_mat = col_fun(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_mat = col_fun(adj)
chordDiagram(adj,col = col_mat, symmetric = TRUE)
chordDiagram(adj,col = col_mat)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
rownames(adj) = EEGNames
colnames(adj) = EEGNames
col_fun = colorRamp2(1:10,1:10,transparency = 0,space="LAB")
col_mat = col_fun(adj)
chordDiagram(adj, col = col_mat)
chordDiagram(adj,col = col_mat, symmetric = TRUE)
View(col_mat)
View(col_mat)
0:1:10
0:0.1:1
0:1:0.1
break = seq(from = 0, to = 1, by = 0.01)
breaks = seq(from = 0, to = 1, by = 0.01)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
breaks = seq(from = 0.1, to = 1, by = 0.01)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
col_mat = col_fun(adj)
View(col_mat)
View(col_mat)
View(adj)
col_fun = colorRamp2(breaks,breaks,transparency = 0,space="LAB")
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
col_mat = col_fun(adj)
View(col_mat)
chordDiagram(adj, col = col_mat, symmetric = TRUE)
library(circlize)
adj = read.delim(pipe("pbpaste"),header=FALSE)
adj = as.matrix(adj)
adj = read.delim(pipe("pbpaste"),header=FALSE)
library(circlize)
cor_mat = read.delim(pipe("pbpaste"),header=FALSE)
cor_mat = as.matrix(cor_mat)
EEGNames = c('Fp1','AF7','AF3','F1','F3','F5','F7','FT7','FC5','FC3','FC1','C1',
'C3','C5','T7','TP7','CP5','CP3','CP1','P1','P3','P5','P7','P9','PO7',
'PO3','O1','Iz','Oz','POz','Pz','CPz','Fpz','Fp2','AF8','AF4','AFz','Fz',
'F2','F4','F6','F8','FT8','FC6','FC4','FC2','FCz','Cz','C2','C4','C6',
'T8','TP8','CP6','CP4','CP2','P2','P4','P6','P8','P10','PO8','PO4','O2')
rownames(cor_mat) = EEGNames
colnames(cor_mat) = EEGNames
col_fun = colorRamp2(c(-1, 0, 1), c("darkgreen", "white", "red"))
chordDiagram(cor_mat, col = col_fun(cor_mat), symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.2] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.4] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.4] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
View(cor_mat)
col_mat = col_fun(cor_mat)
col_mat[abs(cor_mat) < 0.5] = "#00000000"
chordDiagram(cor_mat, col = col_mat, symmetric = TRUE)
install.packages('brainGraph')
library('brainGraph')
install.packages('RGtk2')
data("dk")
install.packages('brainGraph')
install.packages('RGtk2')
install.packages("RGtk2", depen=T, type="source")
install.packages("RGtk2", depen=T, type="source")
setRepositories()
install.packages("rticles", type = "source")
library(rticles)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
library(igraph)
measures = read.csv("./Input/Measures.csv")
measures
library(gplots)
library(ggplot2)
library(corrplot)
install.packages("bootnet")
install.packages("qgraph")
install.packages("lavaan")
library(bootnet)
library(bootnet)
library(qgraph)
help("bootnet")
library(bootnet)
library(qgraph)
library(bootnet)
library(qgraph)
install.packages("skimr")
devtools::install_github("hadley/colformat")
devtools::install_github("ropenscilabs/skimr")
load("~/Dropbox/Research/Ideas/Symptomics/_old_sfari.RData")
library(skimr)
skim(df)
a <- skim(df)
View(a)
library(lavaan)
install.packages(easypackages)
library(easypackages) # then we can do the rest in one go
install.packages('easypackages')
install.packages("easypackages")
library(easypackages) # then we can do the rest in one go
list.of.packages <- c("Hmisc","ggplot2","gplots","ggthemes","viridis","reshape2")
libraries(list.of.packages)
list.of.packages <- c("Hmisc","ggplot2","gplots","ggthemes","viridis","reshape2")
installed.packages()[,"Package"]
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
length(new.packages)
install.packages('proxy')
install.packages("installr")
library(pwr)
install.packages("pwr")
library(igraph)
df <- read.table(file = "~/Downloads/facebook_combined.txt",header = FALSE)
df <- df+1
gdf <- graph_from_edgelist(as.matrix(df))
deg <- degree(gdf)
sum(deg>200)
gdf2 <- delete.vertices(gdf,which(degree(gdf)<200))
wc <- cluster_walktrap(gdf2)
members <- membership(wc)
library(networkD3)
d3 <- igraph_to_networkD3(gdf2, group = members)
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group')
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
zoom = TRUE)
library(magrittr)
simpleNetwork(d3)
forceNetwork(Links = d3$links, Nodes = d3$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
zoom = TRUE) %>%
saveNetwork(file = 'Net1.html')
load("~/Dropbox/Research/Projects/Macaque/Data/nhp_PrePost_StartingData.RData")
View(samplePrePost)
unique(samplePrePost$age)
unique(samplePrePost$age_log2pcd)
View(probes)
install.packages("lavaan", dependencies = TRUE)
library(lavaan)
model <- ' i =~ 1*t1 + 1*t2 + 1*t3 + 1*t4
s =~ 0*t1 + 1*t2 + 2*t3 + 3*t4 '
fit <- growth(model, data=Demo.growth)
summary(fit)
library(semPlot)
install.packages('semPlot')
semPaths(fit, title = FALSE, curvePivot = TRUE)
library(semPlot)
install.packages('OpenMx')
library(semPlot)
library(OpenMx)
install.packages('OpenMx')
install.packages('brainGraph')
install.packages('RGtk2')
devtools::install_github('cwatson/brainGraph')
install.packages("RGtk2", repos="http://www.ggobi.org/r")
library(flexdashboard)
library(DBI)
library(networkD3)
library(visNetwork)
library(igraph)
library(ggplot2)
library(gridExtra)
library(plotly)
x <- read.table("https://stats.idre.ucla.edu/stat/data/mat25.txt",header = FALSE)
colnames(x) <- 1:ncol(x)
g1 <- graph.adjacency(as.matrix(x))
edges <- as.data.frame(get.edgelist(g1))
colnames(edges) <- c("from","to")
edges$from <- as.numeric(edges$from)
edges$to <- as.numeric(edges$to)
zeroIndex <- min(edges)
nodes <- data.frame(id = vertex_attr(g1, "name"),
Degree = degree(g1),
Closeness = closeness(g1)
)
cluster <- cluster_walktrap(g1, weights = NULL)
nodes$group <- as.numeric(membership(cluster))
forceNetwork(Links = edges-zeroIndex, Nodes = nodes,
Source = "from", Target = "to",
NodeID = "id", Group = "group",
opacity = 0.8)
forceNetwork(Links = edges-zeroIndex, Nodes = nodes,
Source = "from", Target = "to",
NodeID = "id", Group = "group",
opacity = 0.8)
visNetwork(nodes, edges) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE,
selectedBy = "group") %>%
visPhysics(solver = "forceAtlas2Based") %>%
#visIgraphLayout(layout = "layout.davidson.harel")
visIgraphLayout(layout = "layout_nicely")
library(reshape2)
FIQT <- function(z=z, min.p=10^-300){
pvals<-2*pnorm(abs(z),low=F)
pvals[pvals<min.p]<- min.p adj.pvals<-p.adjust(pvals,method="fdr") mu.z<-sign(z)*qnorm(adj.pvals/2,low=F) mu.z[abs(z)>qnorm(min.p/2,low=F)]<-z[abs(z)>qnorm(min.p/2,low=F)] mu.z
}
function(z=z, min.p=10^-300){
pvals<-2*pnorm(abs(z),low=F)
pvals[pvals<min.p]<- min.p adj.pvals<-p.adjust(pvals,method="fdr") mu.z<-sign(z)*qnorm(adj.pvals/2,low=F) mu.z[abs(z)>qnorm(min.p/2,low=F)]<-z[abs(z)>qnorm(min.p/2,low=F)] mu.z
}
FIQT <- function(z=z, min.p=10^-300){
pvals<-2*pnorm(abs(z),low=F)
pvals[pvals<min.p]<- min.p
adj.pvals<-p.adjust(pvals,method="fdr") mu.z<-sign(z)*qnorm(adj.pvals/2,low=F)
mu.z[abs(z)>qnorm(min.p/2,low=F)]<-z[abs(z)>qnorm(min.p/2,low=F)] mu.z
}
FIQT <- function(z=z, min.p=10^-300){
pvals<-2*pnorm(abs(z),low=F)
pvals[pvals<min.p]<- min.p
adj.pvals<-p.adjust(pvals,method="fdr")
mu.z<-sign(z)*qnorm(adj.pvals/2,low=F)
mu.z[abs(z)>qnorm(min.p/2,low=F)]<-z[abs(z)>qnorm(min.p/2,low=F)]
mu.z
}
library(reticulate)
use_python("/usr/local/bin/python")
source_python('/Users/Richard/Downloads/BrainsForPublication-new-annots/scripts/pysurfer_plot_parcellation_surface_values.py')
load("~/Dropbox/Research/Projects/MSN_ABIDE/Public/Normative_modeling/Output_500aparc/CT_Age_IQ_Match/W_Threshold/CommonPheno_Wscores.RData")
x = read.delim(pipe("pbpaste"),header=FALSE)
View(x)
df <- subset(combinedData, SUB_ID == x$V1)
df <- subset(combinedData, SUB_ID == as.charachter(x$V1))
df <- subset(combinedData, SUB_ID == as.character(x$V1))
library(dplyr)
test <- match(combinedData$SUB_ID, x$V1)
sum(!is.na(test))
df <- combinedData[test,]
df <- combinedData[!is.na(test),]
View(df)
df$SITE_ID
median(df$FIQ)
mean(df$FIQ)
is.null(df$CURRENT_MEDICATION_NAME)
ASD <- subset(combinedData, DX_GROUP == "ASD")
ASD <- subset(combinedData, DX_GROUP == "ASC")
ASD <- subset(combinedData, DX_GROUP == "Autism")
sum(ASD$CURRENT_MED_STATUS)
sum(as.numeric(ASD$CURRENT_MED_STATUS))
sum(ASD$CURRENT_MED_STATUS == '1')
df$CURRENT_MED_STATUS
sum(ASD$CURRENT_MED_STATUS == 1)
(df$CURRENT_MED_STATUS == 1)
sum(df$CURRENT_MED_STATUS == 1)
sum(ASD$CURRENT_MED_STATUS == 1)
View(ASD)
meds <- ASD$CURRENT_MED_STATUS
meds <- as.numeric(ASD$CURRENT_MED_STATUS)
view(meds)
View(meds)
meds <- ASD$CURRENT_MED_STATUS
meds2 <- meds[meds == 1]
dim(med2)
dim(meds2)
length(meds2)
length(meds)
252/801
5/14
setwd("~/Dropbox/Research/Projects/MSN_ABIDE/Public/Normative_modeling")
measure = "CT"
parcellation = "500aparc"
threshold = TRUE
basedir <- paste("./Output_",parcellation,"/",measure,"_Age_IQ_Match/",sep="")
if (threshold == TRUE){
zdir <- paste(basedir,"W_Threshold/",sep="")
outdir <- paste(basedir,"Subgrouping_Threshold/",sep="")
load(paste(zdir,"CommonPheno_Wscores.RData",sep=""))
} else if (threshold == FALSE){
zdir <- paste(basedir,"W/",sep="")
outdir <- paste(basedir,"Subgrouping/",sep="")
load(paste(zdir,"CommonPheno_Wscores.RData",sep=""))
}
if (!dir.exists(outdir))(
dir.create(outdir)
)
x <- combinedData
measures <- networkDataNames$V1
z <- x[,as.character(measures)]
